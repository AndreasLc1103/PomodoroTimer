{"version":3,"sources":["reportWebVitals.js","Components/TimerComponents/ControlComponents/TimeSelector.js","Components/TimerComponents/ControlsComponent.js","Components/TimerComponents/TimeDisplay.js","Components/TimerComponents/TimerComponent.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TimeSelector","event","this","props","handleChange","typeSelect","Container","fluid","Row","className","Col","for","xs","sm","md","lg","CustomInput","type","id","value","breakTime","onChange","e","workTime","React","Component","ControlsComponent","onStartClick","onPauseClick","handleResetClick","handleWorkTimeChoice","handleBreakTimeChoice","activeButton","startButton","Button","color","size","block","onClick","handleStartClick","pauseButton","handlePauseClick","active","auto","FormGroup","handleWorkTimeSelect","handleBreakTimeSelect","handleReset","TimeDisplay","minutes","seconds","TimerComponent","activeTimer","state","isStarted","isComplete","workTimerActive","breakTimerActive","timer","currentTime","Number","String","handleStop","console","log","JSON","stringify","setState","setInterval","updateTimer","clearInterval","handleActiveTimer","checkSelectedTimes","setActiveTimer","tick","alert","reset","target","xl","handleStartClicked","handleSelectedBreakTime","handleSelectedWorkTime","handleResetOnclick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ee66209.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { auto } from \"@popperjs/core\";\nimport React from \"react\";\nimport { ReactDOM } from \"react-dom\";\nimport { Container, Row, Col, CustomInput } from \"reactstrap\";\n\n/**\n * TimeSelector is a react Component intended to provide control\n * for the user to select a specific time interval\n */\nclass TimeSelector extends React.Component {\n  /**\n   * handles change to the select and sets state\n   * to the component.\n   * @param {*} event\n   */\n  handleChange(event) {\n    this.props.handleChange(event);\n  }\n  /**\n   * render() displays a view to the webpage.\n   * @returns jsx to render to the webpage\n   */\n  render() {\n    const typeSelect = this.props.typeSelect;\n    switch (typeSelect) {\n      case \"breakTime\":\n        return (\n          <Container fluid={true}>\n            <Row className=\"select_text\">\n              <Col className=\"control_Selector\">\n                <label className=\"select_text\" for=\"break_selector\">\n                  Break Times\n                </label>\n              </Col>\n            </Row>\n            <Row className=\"select_text\">\n              <Col xs={12} sm={12} md={12} lg={12} className=\"control_Selector\">\n                <CustomInput\n                  type=\"select\"\n                  id=\"break_selector\"\n                  value={this.props.breakTime}\n                  onChange={(e) => this.handleChange(e)}\n                >\n                  <option value=\"00\"></option>\n                  <option value={5}>5 Minutes</option>\n                  <option value={10}>10 Minutes</option>\n                </CustomInput>\n              </Col>\n            </Row>\n          </Container>\n        );\n      case \"workTime\":\n        return (\n          <Container fluid={true}>\n            <Row className=\"select_text\">\n              <Col className=\"control_Selector\">\n                <label className=\"select_text\" for=\"break_selector\">\n                  Work Times\n                </label>\n              </Col>\n            </Row>\n            <Row className=\"select_text\">\n              <Col xs={12} sm={12} md={12} lg={12} className=\"control_Selector\">\n                <CustomInput\n                  type=\"select\"\n                  id=\"work_selector\"\n                  value={this.props.workTime}\n                  onChange={(e) => this.handleChange(e)}\n                >\n                  <option value=\"null\"></option>\n                  <option value={25}>25 Minutes</option>\n                  <option value={50}>50 Minutes</option>\n                </CustomInput>\n              </Col>\n            </Row>\n          </Container>\n        );\n      default:\n        return null;\n    }\n  }\n}\nexport default TimeSelector;\n","import { auto } from \"@popperjs/core\";\nimport React from \"react\";\nimport { ReactDOM } from \"react\";\nimport { Container, Row, Col, Button, FormGroup } from \"reactstrap\";\nimport TimeSelector from \"./ControlComponents/TimeSelector\";\n\n/**\n * ControlsComponent is a React Class Component.\n * This class is intended to create and render a view of all\n * user controls.\n * @AndreasLc1103\n */\nclass ControlsComponent extends React.Component {\n  /**\n   * Calls the parent components stop function.\n   */\n  handleStartClick() {\n    this.props.onStartClick();\n  }\n  /**\n   * handlePauseClick() lifts\n   * state to the lowest common parent to pause\n   * the timer.\n   */\n  handlePauseClick() {\n    this.props.onPauseClick();\n  }\n  /**\n   *handleReset() is a\n   */\n  handleReset() {\n    this.props.handleResetClick();\n  }\n\n  handleWorkTimeSelect(e) {\n    this.props.handleWorkTimeChoice(e);\n  }\n  handleBreakTimeSelect(e) {\n    this.props.handleBreakTimeChoice(e);\n  }\n  /**\n   *render() renders jsx to display to the user the control\n   elements of this component.\n   * @returns A genertated view \n   */\n  render() {\n    let activeButton = null;\n\n    const startButton = (\n      <Button\n        color=\"primary\"\n        size=\"sm\"\n        block\n        onClick={() => this.handleStartClick()}\n      >\n        Start\n      </Button>\n    );\n    const pauseButton = (\n      <Button\n        color=\"secondary\"\n        size=\"sm\"\n        block\n        onClick={() => this.handlePauseClick()}\n      >\n        Pause\n      </Button>\n    );\n    if (!this.props.active) {\n      activeButton = startButton;\n    } else {\n      activeButton = pauseButton;\n    }\n\n    return (\n      <Container fluid={true}>\n        {/* Stores all the components in a single row. */}\n        <Row>\n          {/* Creates the left most column*/}\n          <Col xs={auto} sm={6} md={6} lg={6}>\n            <FormGroup>\n              <TimeSelector\n                typeSelect=\"workTime\"\n                handleChange={(e) => this.handleWorkTimeSelect(e)}\n              />\n            </FormGroup>\n            {activeButton}\n          </Col>\n          {/* Creates the right most column*/}\n          <Col xs={auto} sm={6} md={6} lg={6}>\n            <FormGroup>\n              <TimeSelector\n                typeSelect=\"breakTime\"\n                handleChange={(e) => this.handleBreakTimeSelect(e)}\n              />\n            </FormGroup>\n            <Button\n              color=\"danger\"\n              size=\"sm\"\n              block\n              onClick={() => this.handleReset()}\n            >\n              reset\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\nexport default ControlsComponent;\n","import React from \"react\";\nimport { ReactDOM } from \"react-dom\";\nimport { Col, Container, Row } from \"reactstrap\";\n\n/**\n * TimeDisplay is a React Component responsible\n * for displaying the timer's current to the webpage\n * @AndreasLc1103\n */\nclass TimeDisplay extends React.Component {\n  render() {\n    return (\n      <Container fluid={true}>\n        <Row>\n          <Col></Col>\n          <Col className=\"time\">\n            {this.props.minutes + \":\" + this.props.seconds}\n          </Col>\n          <Col></Col>\n        </Row>\n      </Container>\n    );\n  }\n}\nexport default TimeDisplay;\n","import { auto } from \"@popperjs/core\";\nimport React from \"react\";\nimport { ReactDOM } from \"react-dom\";\nimport { Container, Row, Col, Footer } from \"reactstrap\";\nimport ControlsComponent from \"./ControlsComponent\";\nimport TimeDisplay from \"../TimerComponents/TimeDisplay\";\n\nclass TimerComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.activeTimer = null;\n    this.state = {\n      isStarted: false,\n      isComplete: false,\n      workTimerActive: true,\n      breakTimerActive: false,\n      workTime: null,\n      breakTime: null,\n      timer: {\n        minutes: \"00\",\n        seconds: \"00\",\n      },\n    };\n  }\n\n  /**\n   * updateTimer handles the state of the timer and updates the time.\n   */\n  updateTimer() {\n    const currentTime = { ...this.state.timer };\n    currentTime.minutes = Number(currentTime.minutes);\n    currentTime.seconds = Number(currentTime.seconds);\n    if (currentTime.minutes !== 0 && currentTime.seconds === 0) {\n      currentTime.minutes = String(currentTime.minutes - 1);\n      currentTime.seconds = \"59\";\n    } else if (currentTime.seconds === 0 && currentTime.minutes === 0) {\n      // Thinking on what to do\n      this.handleStop();\n    } else {\n      currentTime.seconds = String(currentTime.seconds - 1);\n    }\n    console.log(\"I am making it here\\n \" + JSON.stringify(currentTime));\n    this.setState({ timer: { ...currentTime } });\n  }\n  /**\n   * Tick is a function that manages the timer state and decrements the count used to keep track of time\n   */\n  tick() {\n    this.activeTimer = setInterval(() => this.updateTimer(), 1000);\n  }\n  /**\n   * Reset() is used to reinitalize the timer to the intial state.\n   */\n  reset() {\n    // ends the interval and sets the state\n    clearInterval(this.activeTimer);\n    const state = {\n      isStarted: false,\n      workTimerActive: this.state.workTimerActive,\n      breakTimerActive: this.state.breakTimerActive,\n      workTime: this.state.workTime,\n      breakTime: this.state.workTime,\n      timer: { minutes: null, seconds: \"00\" },\n    };\n    switch (this.handleActiveTimer()) {\n      case \"BreakTime\":\n        state.timer.minutes = this.state.breakTime;\n        break;\n      case \"WorkTime\":\n        state.timer.minutes = this.state.workTime;\n        break;\n      default:\n        state.timer.minutes = \"00\";\n        break;\n    }\n    return state;\n  }\n  /**\n   * handleStop cancels the interval function that is called.\n   */\n  handleStop() {\n    clearInterval(this.activeTimer);\n    this.setState({ isStarted: false });\n  }\n  /**\n   * initiates the timer clock to start decrementing\n   */\n  handleStartClicked() {\n    if (this.checkSelectedTimes()) {\n      this.setActiveTimer();\n      this.tick();\n    }\n  }\n  /**\n   * checkSelectedTimes() ensures the user enters\n   * both the work and break times for the timer\n   */\n  checkSelectedTimes() {\n    if (this.state.breakTime === null && this.state.workTime === null) {\n      alert(\"you will need to select both a break and work time interval.\");\n      return false;\n    } else if (this.state.breakTime === null) {\n      alert(\"you will need to select a break time interval.\");\n\n      return false;\n    } else if (this.state.workTime === null) {\n      alert(\"You will need to select a work time interval.\");\n      return false;\n    } else return true;\n  }\n\n  setActiveTimer() {\n    if (this.state.breakTimerActive) {\n      this.setState({\n        isStarted: true,\n        breakTimerActive: true,\n        workTimerActive: false,\n        timer: {\n          minutes: String(this.state.breakTime),\n          seconds: \"00\",\n        },\n      });\n    } else if (this.state.workTimerActive) {\n      this.setState({\n        isStarted: true,\n        breakTimerActive: false,\n        workTimerActive: true,\n        timer: {\n          minutes: String(this.state.workTime),\n          seconds: \"00\",\n        },\n      });\n    }\n  }\n  /**\n    handleResetOnclick is a handler function that \n    is used to call set state on the component after\n    clicking the reset button\n   */\n  handleResetOnclick() {\n    this.setState(this.reset());\n  }\n  /**\n   * handleSelectedWorkTime() is a handler function used to\n   * call a setState on the componenent after it is called.\n   * @param {Event} e given event to get value.\n   */\n  handleSelectedWorkTime(e) {\n    this.setState({ workTime: e.target.value });\n  }\n  handleSelectedBreakTime(e) {\n    this.setState({ breakTime: e.target.value });\n  }\n  /**\n   * handleActiveTimer() is responsible for\n   * returing which timer is active to allow for easier\n   * manipulation and management of state.\n   */\n  handleActiveTimer() {\n    if (this.state.breakTimerActive && this.state.breakTime !== null) {\n      return \"BreakTime\";\n    }\n    if (this.state.workTimerActive && this.state.workTime !== null) {\n      return \"WorkTime\";\n    }\n\n    return null;\n  }\n\n  render() {\n    return (\n      <Container className=\"themed-container\" fluid={true}>\n        <Row>\n          <Col></Col>\n          <Col>\n            {/*This is to store the heading */}\n            <Container>\n              <Row>\n                <h1 className=\"title_info\">PomodoroTimer</h1>\n              </Row>\n            </Container>\n          </Col>\n          <Col></Col>\n        </Row>\n        <Row className=\"TimeDisplay\">\n          <Col></Col>\n          <Col>\n            {\n              <TimeDisplay\n                minutes={this.state.timer.minutes}\n                seconds={this.state.timer.seconds}\n              />\n            }\n          </Col>\n          <Col></Col>\n        </Row>\n        <Row className=\"controls\">\n          <Col></Col>\n          <Col xs={auto} sm={auto} md={8} lg={8} xl={8}>\n            <ControlsComponent\n              active={this.state.isStarted}\n              onStartClick={() => this.handleStartClicked()}\n              onPauseClick={() => this.handleStop()}\n              handleBreakTimeChoice={(e) => this.handleSelectedBreakTime(e)}\n              handleWorkTimeChoice={(e) => this.handleSelectedWorkTime(e)}\n              handleResetClick={() => this.handleResetOnclick()}\n            />\n          </Col>\n          <Col></Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default TimerComponent;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport TimeSelector from \"./Components/TimerComponents/ControlComponents/TimeSelector\";\nimport ControlsComponent from \"./Components/TimerComponents/ControlsComponent\";\nimport TimerComponent from \"./Components/TimerComponents/TimerComponent\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../src/style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <TimerComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}